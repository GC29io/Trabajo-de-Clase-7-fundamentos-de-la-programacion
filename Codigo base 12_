{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1yMR5rocCTvO2KmYIudhuSilkSyv0HoCO","timestamp":1749841625172}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"DLAVDFF19vzf","executionInfo":{"status":"ok","timestamp":1749842028320,"user_tz":360,"elapsed":20,"user":{"displayName":"Gustavo Cardona","userId":"08553903399520867977"}}},"outputs":[],"source":["mapa = [\n","    ['S', '.', '.', 'X', '.', '.', '.', 'X', '.', '.', '.', '.'],\n","    ['X', 'X', '.', 'X', '.', 'X', '.', '.', 'X', 'X', '.', '.'],\n","    ['.', '.', '.', '.', '?', '.', 'X', '.', '.', '.', '?', '.'],\n","    ['.', 'X', 'X', '.', 'X', '.', 'X', 'X', '.', 'X', '.', '.'],\n","    ['.', '.', '?', '.', '.', '.', '.', '.', '.', '?', 'X', '.'],\n","    ['X', '.', 'X', 'X', '.', 'X', 'X', '.', 'X', '.', '.', '.'],\n","    ['.', '.', '.', '.', '?', '.', '.', '?', '.', 'X', '.', '.'],\n","    ['X', 'X', '.', 'X', '.', 'X', '.', 'X', '.', '.', 'X', '.'],\n","    ['.', '.', '.', '.', '.', '.', '.', '.', 'X', '?', '.', '.'],\n","    ['X', '.', 'X', '.', '?', '.', 'X', '.', '.', '.', '.', 'A']\n","]"]},{"cell_type":"code","source":["# ---------------------------------------------------------------\n","# Esta función fue generada con el apoyo de inteligencia artificial,\n","# con fines educativos para mejorar la visualización de mapas en actividades\n","# relacionadas con programación y recursión en Python.\n","# ---------------------------------------------------------------\n","def mostrar_mapa(mapa):\n","  \"\"\"\n","  Muestra visualmente una matriz 2D en la consola, usando colores ANSI para representar\n","  distintos tipos de celdas.\n","\n","  Args:\n","      mapa (list[list[str]]): Matriz 2D que representa el mapa de la investigación.\n","  \"\"\"\n","  colores = {\n","      'S': '\\033[94mS\\033[0m',  # Azul para el inicio\n","      'A': '\\033[92mA\\033[0m',  # Verde para la arqueóloga\n","      '.': '\\033[37m·\\033[0m',  # Gris claro para zona segura\n","      'X': '\\033[91mX\\033[0m',  # Rojo para zona corrupta\n","      '?': '\\033[93m?\\033[0m',  # Amarillo para pista\n","      'v': '\\033[90mv\\033[0m',  # Gris oscuro para visitado\n","  }\n","\n","  print(\"╔\" + \"═══\" * len(mapa[0]) + \"╗\")\n","  for fila in mapa:\n","      linea = \"║\"\n","      for celda in fila:\n","          simbolo = colores.get(celda, celda)\n","          linea += f\" {simbolo} \"\n","      linea += \"║\"\n","      print(linea)\n","  print(\"╚\" + \"═══\" * len(mapa[0]) + \"╝\")"],"metadata":{"id":"oQjZGj8J-adi","executionInfo":{"status":"ok","timestamp":1749842030369,"user_tz":360,"elapsed":21,"user":{"displayName":"Gustavo Cardona","userId":"08553903399520867977"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["mostrar_mapa(mapa)"],"metadata":{"id":"HFeYF-EI-bYN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1749842034793,"user_tz":360,"elapsed":12,"user":{"displayName":"Gustavo Cardona","userId":"08553903399520867977"}},"outputId":"e3087010-91c8-4af0-a059-c893944e61f6"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["╔════════════════════════════════════╗\n","║ \u001b[94mS\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m ║\n","║ \u001b[91mX\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m ║\n","║ \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[93m?\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[93m?\u001b[0m  \u001b[37m·\u001b[0m ║\n","║ \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m ║\n","║ \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[93m?\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[93m?\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m ║\n","║ \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m ║\n","║ \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[93m?\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[93m?\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m ║\n","║ \u001b[91mX\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m ║\n","║ \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[93m?\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m ║\n","║ \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[93m?\u001b[0m  \u001b[37m·\u001b[0m  \u001b[91mX\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[37m·\u001b[0m  \u001b[92mA\u001b[0m ║\n","╚════════════════════════════════════╝\n"]}]},{"cell_type":"code","source":["def buscar_inicio():\n","  \"\"\"\n","  Busca la posición del símbolo 'S' en una matriz 2D llamada 'mapa'.\n","\n","  Returns:\n","      tuple[int, int] or tuple[None, None]: Una tupla con la posición (fila, columna)\n","      donde se encuentra 'S'. Si no se encuentra, retorna (None, None).\n","  \"\"\"\n","\n","  for i in range(len(mapa)):\n","      for j in range(len(mapa[i])):\n","          if mapa[i][j] == 'S':\n","            return (i, j)\n","          return (None, None)\n","  None"],"metadata":{"id":"iOPyWF9S_Z3p","executionInfo":{"status":"ok","timestamp":1749844176780,"user_tz":360,"elapsed":4,"user":{"displayName":"Gustavo Cardona","userId":"08553903399520867977"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def buscar_objetivo(mapa, x, y):\n","  \"\"\"\n","  Realiza una búsqueda recursiva en una matriz 2D para encontrar el objetivo 'A'.\n","\n","  La función verifica si desde la posición (x, y) es posible alcanzar una celda con el\n","  carácter 'A', evitando zonas corruptas ('X') y celdas ya visitadas ('v').\n","  Marca las celdas visitadas durante la exploración para evitar ciclos infinitos.\n","\n","  Args:\n","      mapa (list[list[str]]): Matriz 2D que representa el mapa, donde:\n","          - 'A' es el objetivo a encontrar,\n","          - 'X' representa zonas corruptas,\n","          - cualquier otro carácter representa un espacio transitable.\n","      x (int): Fila inicial desde la cual comenzar la búsqueda.\n","      y (int): Columna inicial desde la cual comenzar la búsqueda.\n","\n","  Returns:\n","      bool: 'True' si se encuentra el objetivo 'A'; 'False' en caso contrario.\n","  \"\"\"\n","  # Verificar si la posicion esta fuera del mapa:\n","  if x <= 0 or x >=len(mapa) or y < 0 or y >= len(mapa[0]):\n","   return False\n","\n","  #Obtener el valor de la celda actual\n","  celda = mapa[x][y]\n","\n","  # SI es una zona corrupta o ya visitada, no continuar\n","  if celda == 'X' or celda == 'V':\n","    return False\n","\n","  # Si encontramos al objetivo\n","  if celda == 'A':\n","    return False\n","\n","  mapa[x][y]\n","\n","    # Explorar las 4 direcciones:\n","  if (buscar_objetivo(mapa, x + 1, y)) or (buscar_objetivo(mapa, x - 1, y)) or (buscar_objetivo(mapa, x, y + 1)) or (buscar_objetivo(mapa, x, y - 1)):\n","    return True\n","  else:\n","    return False\n","\n",""],"metadata":{"id":"g4gjOgDrAt7h","executionInfo":{"status":"ok","timestamp":1749844393949,"user_tz":360,"elapsed":3,"user":{"displayName":"Gustavo Cardona","userId":"08553903399520867977"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["i, j = buscar_inicio()\n","if i is None or j is None:\n","  print('Coordenada de entraada no encontrada')\n","else:\n","  print(f'Coordenada de entrada encontrada: ({i}, {j}):')\n","  resultado = buscar_objetivo(mapa, i, j)\n","  if resultado:\n","    print('Objetivo encontrado')\n","  else:\n","    print('Objetivo no encontrado')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uIyEitRB01cP","executionInfo":{"status":"ok","timestamp":1749844412437,"user_tz":360,"elapsed":8,"user":{"displayName":"Gustavo Cardona","userId":"08553903399520867977"}},"outputId":"a8eb4f5a-33f5-4a83-e2ae-a595b5cbe750"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Coordenada de entrada encontrada: (0, 0):\n","Objetivo no encontrado\n"]}]}]}